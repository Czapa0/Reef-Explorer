#pragma kernel GenerateDensity
#include "Includes/Noise3D.compute"

static const int numThreads = 8;

RWStructuredBuffer<float> densities;
StructuredBuffer<float3> offsets;

float3 spaceOffset;

int numOctaves;
float frequency;
float lacunarity;
float amplitude;
float persistence;

float offsetY;
float yWeight;
float noiseWeight;
float vWeight;

float ceilingY;
float ceilingWeight;
float hardCeilingY;
float hardCeilingWeight;

float floorY;
float floorWeight;
float hardFloorY;
float hardFloorWeight;

float warpFrequency;
float warpAmplitude;

float2 terracing;

int pointsPerAxisXZ;
int pointsPerAxisY;
float scale;
float3 worldPos;

int idToIndex(int x, int y, int z) {
    return z * pointsPerAxisXZ * pointsPerAxisY + y * pointsPerAxisXZ + x;
}

[numthreads(numThreads, numThreads, numThreads)]
void GenerateDensity (int3 id : SV_DispatchThreadID) {
    if (id.x >= pointsPerAxisXZ || id.y >= pointsPerAxisY || id.z >= pointsPerAxisXZ) {
        return;
    }

    float3 pos = scale * id + worldPos;
    // warping
    float3 warp = snoise(pos * warpFrequency);
    float3 wpos = pos + warp * warpAmplitude;
    
    float f = frequency;
    float a = amplitude;
    float noise = 0;
    float weight = 1;
    // calculating noise using octaves
    for (int i = 0; i < numOctaves; i++) {
        float n = snoise(wpos * frequency + offsets[i] + spaceOffset);
        // adaptive layering (sharper features)
        float v = 1 - abs(n);
        v = v * v;
        v *= weight; 
        weight = max(min(v * vWeight, 1), 0);

        noise += v * a;
        f *= lacunarity;
        a *= persistence;
    }
    
    float density = (offsetY - pos.y) * yWeight + noise * noiseWeight;
    if (terracing.x != 0) {
        density += (pos.y % terracing.x) * terracing.y;

    }

    // y-based adjustments
    if (pos.y > ceilingY) {
        density += pos.y * ceilingWeight;
        
        if (pos.y > hardCeilingY) {
            density = hardCeilingWeight;
        }
    }
    
    if (pos.y < floorY) {
        density += pos.y * floorWeight;
            
        if (pos.y < hardFloorY) {
            density = hardFloorWeight;
        }
    }

    densities[idToIndex(id.x, id.y, id.z)] = density;
}
