//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/Scripts/Controls/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""67b507fd-a444-410b-987a-8dd82766b1d4"",
            ""actions"": [
                {
                    ""name"": ""Swimming"",
                    ""type"": ""Value"",
                    ""id"": ""52087f88-9be9-4efd-b73a-5458386b4c53"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Looking"",
                    ""type"": ""Value"",
                    ""id"": ""aa5a59c0-85ad-4d98-94ea-af8761021ea9"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": ""ScaleVector2(x=0.5,y=0.5)"",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Surfacing"",
                    ""type"": ""Value"",
                    ""id"": ""0be3999b-5b5b-4c20-b1b9-072067e29c7a"",
                    ""expectedControlType"": ""Digital"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Flashlight"",
                    ""type"": ""Button"",
                    ""id"": ""e293c1a0-5df4-4d21-b12b-55f824a81d7b"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Speeding"",
                    ""type"": ""Value"",
                    ""id"": ""7cc9fd50-3695-480e-afc6-7752dd9c42de"",
                    ""expectedControlType"": ""Digital"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""dadacddc-0b91-4d86-8ab3-2b7c308c71d8"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Looking"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""b04a22e4-dd65-467d-b02a-1819513e5ecb"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Swimming"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""bb6b8caf-2784-43cc-b15d-c6b0a1ee1283"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Swimming"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""c583cc34-0e8a-4fce-94fd-5bb92bf0ce1b"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Swimming"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""242f8f01-8a2d-4ca9-90f6-6d206f9e545b"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Swimming"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""4a8bc815-8dfc-4729-8294-e9fbd76d97ea"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Swimming"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""235c7779-65d6-4ead-bc30-22397206cae5"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Flashlight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""71de17b7-9bd6-4ce5-9699-9138c645ee70"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Surfacing"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""67485fd9-dfd0-4146-842a-0c72f2a35d3f"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Speeding"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Keys"",
            ""id"": ""b7b8d9a9-5ff5-45d3-9c03-8a5eefaf5b3a"",
            ""actions"": [
                {
                    ""name"": ""Camera Switch"",
                    ""type"": ""Button"",
                    ""id"": ""98d842f0-13b0-462a-bbbf-9d4c39f4e628"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""47e54100-fd47-49d9-8e41-8288d958b475"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Camera Switch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Swimming = m_Player.FindAction("Swimming", throwIfNotFound: true);
        m_Player_Looking = m_Player.FindAction("Looking", throwIfNotFound: true);
        m_Player_Surfacing = m_Player.FindAction("Surfacing", throwIfNotFound: true);
        m_Player_Flashlight = m_Player.FindAction("Flashlight", throwIfNotFound: true);
        m_Player_Speeding = m_Player.FindAction("Speeding", throwIfNotFound: true);
        // Keys
        m_Keys = asset.FindActionMap("Keys", throwIfNotFound: true);
        m_Keys_CameraSwitch = m_Keys.FindAction("Camera Switch", throwIfNotFound: true);
    }

    ~@Controls()
    {
        UnityEngine.Debug.Assert(!m_Player.enabled, "This will cause a leak and performance issues, Controls.Player.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_Keys.enabled, "This will cause a leak and performance issues, Controls.Keys.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_Swimming;
    private readonly InputAction m_Player_Looking;
    private readonly InputAction m_Player_Surfacing;
    private readonly InputAction m_Player_Flashlight;
    private readonly InputAction m_Player_Speeding;
    public struct PlayerActions
    {
        private @Controls m_Wrapper;
        public PlayerActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Swimming => m_Wrapper.m_Player_Swimming;
        public InputAction @Looking => m_Wrapper.m_Player_Looking;
        public InputAction @Surfacing => m_Wrapper.m_Player_Surfacing;
        public InputAction @Flashlight => m_Wrapper.m_Player_Flashlight;
        public InputAction @Speeding => m_Wrapper.m_Player_Speeding;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @Swimming.started += instance.OnSwimming;
            @Swimming.performed += instance.OnSwimming;
            @Swimming.canceled += instance.OnSwimming;
            @Looking.started += instance.OnLooking;
            @Looking.performed += instance.OnLooking;
            @Looking.canceled += instance.OnLooking;
            @Surfacing.started += instance.OnSurfacing;
            @Surfacing.performed += instance.OnSurfacing;
            @Surfacing.canceled += instance.OnSurfacing;
            @Flashlight.started += instance.OnFlashlight;
            @Flashlight.performed += instance.OnFlashlight;
            @Flashlight.canceled += instance.OnFlashlight;
            @Speeding.started += instance.OnSpeeding;
            @Speeding.performed += instance.OnSpeeding;
            @Speeding.canceled += instance.OnSpeeding;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @Swimming.started -= instance.OnSwimming;
            @Swimming.performed -= instance.OnSwimming;
            @Swimming.canceled -= instance.OnSwimming;
            @Looking.started -= instance.OnLooking;
            @Looking.performed -= instance.OnLooking;
            @Looking.canceled -= instance.OnLooking;
            @Surfacing.started -= instance.OnSurfacing;
            @Surfacing.performed -= instance.OnSurfacing;
            @Surfacing.canceled -= instance.OnSurfacing;
            @Flashlight.started -= instance.OnFlashlight;
            @Flashlight.performed -= instance.OnFlashlight;
            @Flashlight.canceled -= instance.OnFlashlight;
            @Speeding.started -= instance.OnSpeeding;
            @Speeding.performed -= instance.OnSpeeding;
            @Speeding.canceled -= instance.OnSpeeding;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @Player => new PlayerActions(this);

    // Keys
    private readonly InputActionMap m_Keys;
    private List<IKeysActions> m_KeysActionsCallbackInterfaces = new List<IKeysActions>();
    private readonly InputAction m_Keys_CameraSwitch;
    public struct KeysActions
    {
        private @Controls m_Wrapper;
        public KeysActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @CameraSwitch => m_Wrapper.m_Keys_CameraSwitch;
        public InputActionMap Get() { return m_Wrapper.m_Keys; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(KeysActions set) { return set.Get(); }
        public void AddCallbacks(IKeysActions instance)
        {
            if (instance == null || m_Wrapper.m_KeysActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_KeysActionsCallbackInterfaces.Add(instance);
            @CameraSwitch.started += instance.OnCameraSwitch;
            @CameraSwitch.performed += instance.OnCameraSwitch;
            @CameraSwitch.canceled += instance.OnCameraSwitch;
        }

        private void UnregisterCallbacks(IKeysActions instance)
        {
            @CameraSwitch.started -= instance.OnCameraSwitch;
            @CameraSwitch.performed -= instance.OnCameraSwitch;
            @CameraSwitch.canceled -= instance.OnCameraSwitch;
        }

        public void RemoveCallbacks(IKeysActions instance)
        {
            if (m_Wrapper.m_KeysActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IKeysActions instance)
        {
            foreach (var item in m_Wrapper.m_KeysActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_KeysActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public KeysActions @Keys => new KeysActions(this);
    public interface IPlayerActions
    {
        void OnSwimming(InputAction.CallbackContext context);
        void OnLooking(InputAction.CallbackContext context);
        void OnSurfacing(InputAction.CallbackContext context);
        void OnFlashlight(InputAction.CallbackContext context);
        void OnSpeeding(InputAction.CallbackContext context);
    }
    public interface IKeysActions
    {
        void OnCameraSwitch(InputAction.CallbackContext context);
    }
}
